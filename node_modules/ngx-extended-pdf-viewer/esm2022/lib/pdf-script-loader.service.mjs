import { CSP_NONCE, Inject, Injectable, effect, signal } from '@angular/core';
import { getVersionSuffix, pdfDefaultOptions } from './options/pdf-default-options';
import * as i0 from "@angular/core";
import * as i1 from "./pdf-csp-policy.service";
export class PDFScriptLoaderService {
    pdfCspPolicyService;
    csp_nonce;
    _forceUsingLegacyES5 = false;
    get forceUsingLegacyES5() {
        return this._forceUsingLegacyES5;
    }
    set forceUsingLegacyES5(value) {
        console.log('Please use the attribute `[forceUsingLegacyES5]` instead of setting the property in the service.');
        this._forceUsingLegacyES5 = value;
    }
    // this event is fired when the pdf.js library has been loaded and objects like PDFApplication are available
    onPDFJSInitSignal = signal(undefined);
    pdfjsVersion = getVersionSuffix(pdfDefaultOptions.assetsFolder);
    shuttingDown = false;
    _needsES5 = undefined;
    PDFViewerApplication;
    PDFViewerApplicationOptions;
    // private PDFViewerApplicationConstants: any;
    webViewerLoad;
    ngxExtendedPdfViewerIncompletelyInitialized = true;
    constructor(pdfCspPolicyService, csp_nonce) {
        this.pdfCspPolicyService = pdfCspPolicyService;
        this.csp_nonce = csp_nonce;
        effect(() => {
            if (this.onPDFJSInitSignal()) {
                this.pdfjsVersion = getVersionSuffix(pdfDefaultOptions.assetsFolder);
            }
        });
    }
    addScriptOpChainingSupport(useInlineScripts) {
        if (!useInlineScripts || this.isCSPApplied()) {
            return new Promise((resolve) => {
                const script = this.createScriptElement(pdfDefaultOptions.assetsFolder + '/op-chaining-support.js');
                script.onload = () => {
                    script.remove();
                    script.onload = null;
                    resolve(globalThis.ngxExtendedPdfViewerCanRunModernJSCode);
                };
                script.onerror = () => {
                    script.remove();
                    globalThis.ngxExtendedPdfViewerCanRunModernJSCode = false;
                    resolve(false);
                    script.onerror = null;
                };
                document.body.appendChild(script);
            });
        }
        else {
            const code = `
new (function () {
  class BrowserCompatibilityTester {
    // Does your browser doesn't support private fields?
    #privateField;

    constructor() {
      // Does your browser support the logical assignment operators?
      let x = false;
      x ||= true;

      this.#privateMethod();
    }

    // Does your browser doesn't support private methods?
    #privateMethod() {
      // check the the browser supports string.at()
      return 'hello'.at(4);
    }

    supportsOptionalChaining() {
      const optionalChaining = {
        support: true,
      };
      return optionalChaining?.support;
    }
  }

  function supportsPromiseWithResolvers() {
    const iframe = document.createElement('iframe');
    document.firstElementChild.append(iframe);
    const useLegacyPdfViewer = 'withResolvers' in iframe.contentWindow['Promise'];
    iframe.parentElement.removeChild(iframe);

    return useLegacyPdfViewer;
  }

  const supportsOptionalChaining = new BrowserCompatibilityTester().supportsOptionalChaining();
  const supportModernPromises = supportsPromiseWithResolvers();
  window.ngxExtendedPdfViewerCanRunModernJSCode = supportsOptionalChaining && supportModernPromises;
})();
`;
            const script = this.createInlineScript(code);
            document.getElementsByTagName('head')[0].appendChild(script);
            return new Promise((resolve) => {
                const interval = setInterval(() => {
                    if (globalThis.ngxExtendedPdfViewerCanRunModernJSCode !== undefined) {
                        clearInterval(interval);
                        resolve(globalThis.ngxExtendedPdfViewerCanRunModernJSCode);
                    }
                }, 1);
            });
        }
    }
    createInlineScript(code) {
        const script = document.createElement('script');
        script.async = true;
        script.type = 'module';
        script.className = `ngx-extended-pdf-viewer-script`;
        script.text = code;
        if (this.csp_nonce) {
            // assigning null to script.nonce results in a string "null", so let's add a null check
            script.nonce = this.csp_nonce;
        }
        return script;
    }
    isCSPAppliedViaMetaTag() {
        const metaTags = document.getElementsByTagName('meta');
        for (let i = 0; i < metaTags.length; i++) {
            if (metaTags[i].getAttribute('http-equiv') === 'Content-Security-Policy') {
                return true;
            }
        }
        return false;
    }
    isCSPApplied() {
        if (this.isCSPAppliedViaMetaTag()) {
            return true;
        }
        return false;
    }
    createScriptElement(sourcePath) {
        const script = document.createElement('script');
        script.async = true;
        script.type = sourcePath.includes('.mjs') ? 'module' : 'text/javascript';
        script.className = `ngx-extended-pdf-viewer-script`;
        this.pdfCspPolicyService.addTrustedJavaScript(script, sourcePath);
        return script;
    }
    getPdfJsPath(artifact) {
        let suffix = pdfDefaultOptions._internalFilenameSuffix;
        if (this._needsES5) {
            suffix = ''; // we don't publish minified ES5 files
        }
        suffix += '.mjs';
        const assets = pdfDefaultOptions.assetsFolder;
        const versionSuffix = getVersionSuffix(assets);
        const artifactPath = `/${artifact}-`;
        const es5 = this._needsES5 ? '-es5' : '';
        return assets + artifactPath + versionSuffix + es5 + suffix;
    }
    async loadViewer(forceReload) {
        return new Promise((resolve) => {
            let viewerPath = this.getPdfJsPath('viewer');
            if (forceReload) {
                viewerPath += '?v=' + new Date().getTime();
            }
            const listener = (event) => {
                const { PDFViewerApplication, PDFViewerApplicationOptions, webViewerLoad } = event.detail;
                this.PDFViewerApplication = PDFViewerApplication;
                this.PDFViewerApplicationOptions = PDFViewerApplicationOptions;
                this.webViewerLoad = webViewerLoad;
                resolve();
                document.removeEventListener('ngxViewerFileHasBeenLoaded', listener);
            };
            document.addEventListener('ngxViewerFileHasBeenLoaded', listener, { once: true });
            const script = this.createScriptElement(viewerPath);
            document.getElementsByTagName('head')[0].appendChild(script);
        });
    }
    addFeatures() {
        return new Promise((resolve) => {
            const script = this.createScriptElement(pdfDefaultOptions.assetsFolder + '/additional-features.js');
            script.onload = () => {
                script.remove();
            };
            script.onerror = () => {
                script.remove();
                resolve();
            };
            document.body.appendChild(script);
        });
    }
    async ensurePdfJsHasBeenLoaded(useInlineScripts, forceUsingLegacyES5, forceReload) {
        if (this.PDFViewerApplication) {
            return true;
        }
        this._needsES5 = forceUsingLegacyES5 || (await this.needsES5(useInlineScripts));
        if (forceUsingLegacyES5) {
            pdfDefaultOptions.needsES5 = true;
        }
        await this.loadViewer(forceReload);
        return this.PDFViewerApplication !== undefined;
    }
    ngOnDestroy() {
        this.shuttingDown = true;
        if (typeof window === 'undefined') {
            return; // fast escape for server side rendering
        }
        delete globalThis['setNgxExtendedPdfViewerSource'];
        const w = window;
        delete w.pdfjsLib;
        document.querySelectorAll('.ngx-extended-pdf-viewer-script').forEach((e) => {
            e.onload = null;
            e.remove();
        });
    }
    iOSVersionRequiresES5() {
        if (typeof window === 'undefined') {
            // server-side rendering
            return false;
        }
        const match = navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
        if (match !== undefined && match !== null) {
            return parseInt(match[1], 10) < 14;
        }
        return false;
    }
    async needsES5(useInlineScripts) {
        if (typeof window === 'undefined') {
            // server-side rendering
            return false;
        }
        if (this._needsES5 === undefined) {
            const isIE = !!globalThis.MSInputMethodContext && !!document.documentMode;
            const isEdge = /Edge\/\d./i.test(navigator.userAgent);
            const isIOs13OrBelow = this.iOSVersionRequiresES5();
            let needsES5 = typeof ReadableStream === 'undefined' || typeof Promise['allSettled'] === 'undefined';
            if (needsES5 || isIE || isEdge || isIOs13OrBelow || this.forceUsingLegacyES5) {
                this._needsES5 = true;
                return true;
            }
            this._needsES5 = !(await this.ngxExtendedPdfViewerCanRunModernJSCode(useInlineScripts));
            this.polyfillPromiseWithResolversIfZoneJSOverwritesIt();
        }
        return this._needsES5;
    }
    /**
     * Angular 16 uses zone.js 0.13.3, and this version has a problem with Promise.withResolvers.
     * If your browser supports Promise.withResolvers, zone.js accidentally overwrites it with "undefined".
     * This method adds a polyfill for Promise.withResolvers if it is not available.
     */
    polyfillPromiseWithResolversIfZoneJSOverwritesIt() {
        const TypelessPromise = Promise;
        if (!TypelessPromise.withResolvers) {
            TypelessPromise.withResolvers = function withResolvers() {
                let a;
                let b;
                const c = new this(function (resolve, reject) {
                    a = resolve;
                    b = reject;
                });
                return { resolve: a, reject: b, promise: c };
            };
        }
    }
    ngxExtendedPdfViewerCanRunModernJSCode(useInlineScripts) {
        return new Promise((resolve) => {
            const support = globalThis.ngxExtendedPdfViewerCanRunModernJSCode;
            support !== undefined ? resolve(support) : resolve(this.addScriptOpChainingSupport(useInlineScripts));
        });
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: PDFScriptLoaderService, deps: [{ token: i1.PdfCspPolicyService }, { token: CSP_NONCE }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: PDFScriptLoaderService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: PDFScriptLoaderService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.PdfCspPolicyService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [CSP_NONCE]
                }] }] });
//# sourceMappingURL=data:application/json;base64,