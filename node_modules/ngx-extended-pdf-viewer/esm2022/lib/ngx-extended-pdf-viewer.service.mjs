import { effect, Injectable } from '@angular/core';
import { AnnotationEditorParamsType, AnnotationMode } from './options/editor-annotations';
import * as i0 from "@angular/core";
import * as i1 from "./pdf-notification-service";
export class NgxExtendedPdfViewerService {
    rendererFactory;
    ngxExtendedPdfViewerInitialized = false;
    secondaryMenuIsEmpty = false;
    renderer;
    PDFViewerApplication;
    constructor(rendererFactory, notificationService) {
        this.rendererFactory = rendererFactory;
        this.renderer = this.rendererFactory.createRenderer(null, null);
        effect(() => {
            this.PDFViewerApplication = notificationService.onPDFJSInitSignal();
        });
    }
    find(text, options = {}) {
        if (!this.ngxExtendedPdfViewerInitialized) {
            // tslint:disable-next-line:quotemark
            console.error("The PDF viewer hasn't finished initializing. Please call find() later.");
            return undefined;
        }
        else {
            if (!options.useSecondaryFindcontroller) {
                const highlightAllCheckbox = document.getElementById('findHighlightAll');
                if (highlightAllCheckbox) {
                    highlightAllCheckbox.checked = options.highlightAll ?? false;
                }
                const matchCaseCheckbox = document.getElementById('findMatchCase');
                if (matchCaseCheckbox) {
                    matchCaseCheckbox.checked = options.matchCase ?? false;
                }
                const findMultipleCheckbox = document.getElementById('findMultiple');
                if (findMultipleCheckbox) {
                    findMultipleCheckbox.checked = options.findMultiple ?? false;
                }
                const entireWordCheckbox = document.getElementById('findEntireWord');
                if (entireWordCheckbox) {
                    entireWordCheckbox.checked = options.wholeWords ?? false;
                }
                const matchDiacriticsCheckbox = document.getElementById('findMatchDiacritics');
                if (matchDiacriticsCheckbox) {
                    matchDiacriticsCheckbox.checked = options.matchDiacritics ?? false;
                }
                const matchRegExpCheckbox = document.getElementById('matchRegExp');
                if (matchRegExpCheckbox) {
                    matchRegExpCheckbox.checked = options.regexp ?? false;
                    if (matchRegExpCheckbox.checked) {
                        if (findMultipleCheckbox) {
                            findMultipleCheckbox.checked = false;
                        }
                        if (entireWordCheckbox) {
                            entireWordCheckbox.checked = false;
                        }
                        if (matchDiacriticsCheckbox) {
                            matchDiacriticsCheckbox.checked = false;
                        }
                    }
                    if (findMultipleCheckbox) {
                        findMultipleCheckbox.disabled = matchRegExpCheckbox.checked;
                    }
                    if (entireWordCheckbox) {
                        entireWordCheckbox.disabled = matchRegExpCheckbox.checked;
                    }
                    if (matchDiacriticsCheckbox) {
                        matchDiacriticsCheckbox.disabled = matchRegExpCheckbox.checked;
                    }
                }
                const inputField = document.getElementById('findInput');
                if (inputField && typeof text === 'string') {
                    inputField.value = text;
                }
            }
            const findParameters = {
                caseSensitive: options.matchCase ?? false,
                entireWord: options.wholeWords ?? false,
                highlightAll: options.highlightAll ?? false,
                matchDiacritics: options.matchDiacritics ?? false,
                findMultiple: options.findMultiple,
                matchRegExp: options.regexp ?? false,
                findPrevious: false,
                query: text,
                source: null,
                type: 'find',
                dontScrollIntoView: options.dontScrollIntoView ?? false,
            };
            const findController = options.useSecondaryFindcontroller ? this.PDFViewerApplication?.customFindController : this.PDFViewerApplication?.findController;
            const result = findController?.ngxFind(findParameters);
            return result;
        }
    }
    findNext(useSecondaryFindcontroller = false) {
        if (!this.ngxExtendedPdfViewerInitialized) {
            // tslint:disable-next-line:quotemark
            console.error("The PDF viewer hasn't finished initializing. Please call findNext() later.");
            return false;
        }
        else {
            const findController = useSecondaryFindcontroller ? this.PDFViewerApplication?.customFindController : this.PDFViewerApplication?.findController;
            findController?.ngxFindNext();
            return true;
        }
    }
    findPrevious(useSecondaryFindcontroller = false) {
        if (!this.ngxExtendedPdfViewerInitialized) {
            // tslint:disable-next-line:quotemark
            console.error("The PDF viewer hasn't finished initializing. Please call findPrevious() later.");
            return false;
        }
        else {
            const findController = useSecondaryFindcontroller ? this.PDFViewerApplication?.customFindController : this.PDFViewerApplication?.findController;
            findController?.ngxFindPrevious();
            return true;
        }
    }
    print(printRange) {
        if (this.PDFViewerApplication) {
            const alreadyPrinting = this.PDFViewerApplication?.PDFPrintServiceFactory?.isInPDFPrintRange !== undefined;
            if (!alreadyPrinting) {
                // slow down hurried users clicking the print button multiple times
                if (!printRange) {
                    printRange = {};
                }
                this.setPrintRange(printRange);
                this.PDFViewerApplication?.printPdf();
                this.PDFViewerApplication?.eventBus.on('afterprint', this.removePrintRange.bind(this), { once: true });
            }
        }
    }
    removePrintRange() {
        if (this.PDFViewerApplication?.PDFPrintServiceFactory) {
            delete this.PDFViewerApplication.PDFPrintServiceFactory.isInPDFPrintRange;
            delete this.PDFViewerApplication.PDFPrintServiceFactory.filteredPageCount;
        }
    }
    setPrintRange(printRange) {
        if (!this.PDFViewerApplication?.PDFPrintServiceFactory) {
            console.error("The print service hasn't been initialized yet.");
            return;
        }
        this.PDFViewerApplication.PDFPrintServiceFactory.isInPDFPrintRange = (page) => this.isInPDFPrintRange(page, printRange);
        this.PDFViewerApplication.PDFPrintServiceFactory.filteredPageCount = this.filteredPageCount(this.PDFViewerApplication?.pagesCount, printRange);
    }
    filteredPageCount(pageCount, range) {
        let result = 0;
        for (let page = 0; page < pageCount; page++) {
            if (this.isInPDFPrintRange(page, range)) {
                result++;
            }
        }
        return result;
    }
    isInPDFPrintRange(pageIndex, printRange) {
        const page = pageIndex + 1;
        if (printRange.from) {
            if (page < printRange.from) {
                return false;
            }
        }
        if (printRange.to) {
            if (page > printRange.to) {
                return false;
            }
        }
        if (printRange.excluded) {
            if (printRange.excluded.some((p) => p === page)) {
                return false;
            }
        }
        if (printRange.included) {
            if (!printRange.included.some((p) => p === page)) {
                return false;
            }
        }
        return true;
    }
    async getPageAsLines(pageNumber) {
        if (this.PDFViewerApplication) {
            const pdfDocument = this.PDFViewerApplication?.pdfDocument;
            const page = await pdfDocument.getPage(pageNumber);
            const textSnippets = (await page.getTextContent()).items //
                .filter((info) => !info['type']); // ignore the TextMarkedContent items
            const snippets = textSnippets;
            let minX = Number.MAX_SAFE_INTEGER;
            let minY = Number.MAX_SAFE_INTEGER;
            let maxX = Number.MIN_SAFE_INTEGER;
            let maxY = Number.MIN_SAFE_INTEGER;
            let countLTR = 0;
            let countRTL = 0;
            let text = '';
            let lines = new Array();
            for (let i = 0; i < snippets.length; i++) {
                const currentSnippet = snippets[i];
                if (!currentSnippet.hasEOL) {
                    const x = currentSnippet.transform[4];
                    const y = -currentSnippet.transform[5];
                    const width = currentSnippet.width;
                    const height = currentSnippet.height;
                    minX = Math.min(minX, x);
                    minY = Math.min(minY, y);
                    maxX = Math.max(maxX, x + width);
                    maxY = Math.max(maxY, y + height);
                    text += currentSnippet.str;
                    if (currentSnippet.dir === 'rtl') {
                        countRTL++;
                    }
                    if (currentSnippet.dir === 'ltr') {
                        countLTR++;
                    }
                }
                let addIt = i === snippets.length - 1 || currentSnippet.hasEOL;
                if (addIt) {
                    let direction = undefined;
                    if (countLTR > 0 && countRTL > 0) {
                        direction = 'both';
                    }
                    else if (countLTR > 0) {
                        direction = 'ltr';
                    }
                    else if (countRTL > 0) {
                        direction = 'rtl';
                    }
                    const line = {
                        direction,
                        x: minX,
                        y: minY,
                        width: maxX - minX,
                        height: maxY - minY,
                        text: text.trim(),
                    };
                    lines.push(line);
                    minX = Number.MAX_SAFE_INTEGER;
                    minY = Number.MAX_SAFE_INTEGER;
                    maxX = Number.MIN_SAFE_INTEGER;
                    maxY = Number.MIN_SAFE_INTEGER;
                    countLTR = 0;
                    countRTL = 0;
                    text = '';
                }
            }
            return lines;
        }
        return [];
    }
    async getPageAsText(pageNumber) {
        if (!this.PDFViewerApplication) {
            return '';
        }
        const pdfDocument = this.PDFViewerApplication?.pdfDocument;
        const page = await pdfDocument.getPage(pageNumber);
        const textSnippets = (await page.getTextContent()).items;
        return this.convertTextInfoToText(textSnippets);
    }
    convertTextInfoToText(textInfoItems) {
        if (!textInfoItems) {
            return '';
        }
        return textInfoItems
            .filter((info) => !info['type'])
            .map((info) => (info.hasEOL ? info.str + '\n' : info.str))
            .join('');
    }
    async getPageAsCanvas(pageNumber, scale, background, backgroundColorToReplace = '#FFFFFF', annotationMode = AnnotationMode.ENABLE) {
        if (!this.PDFViewerApplication) {
            return Promise.resolve(undefined);
        }
        const pdfDocument = this.PDFViewerApplication.pdfDocument;
        const pdfPage = await pdfDocument.getPage(pageNumber);
        return this.draw(pdfPage, scale, background, backgroundColorToReplace, annotationMode);
    }
    async getPageAsImage(pageNumber, scale, background, backgroundColorToReplace = '#FFFFFF', annotationMode = AnnotationMode.ENABLE) {
        const canvas = await this.getPageAsCanvas(pageNumber, scale, background, backgroundColorToReplace, annotationMode);
        return canvas?.toDataURL();
    }
    async draw(pdfPage, scale, background, backgroundColorToReplace = '#FFFFFF', annotationMode = AnnotationMode.ENABLE) {
        let zoomFactor = 1;
        if (scale.scale) {
            zoomFactor = scale.scale;
        }
        else if (scale.width) {
            zoomFactor = scale.width / pdfPage.getViewport({ scale: 1 }).width;
        }
        else if (scale.height) {
            zoomFactor = scale.height / pdfPage.getViewport({ scale: 1 }).height;
        }
        const viewport = pdfPage.getViewport({
            scale: zoomFactor,
        });
        const { ctx, canvas } = this.getPageDrawContext(viewport.width, viewport.height);
        const drawViewport = viewport.clone();
        const renderContext = {
            canvasContext: ctx,
            viewport: drawViewport,
            background,
            backgroundColorToReplace,
            annotationMode,
        };
        const renderTask = pdfPage.render(renderContext);
        const dataUrlPromise = () => Promise.resolve(canvas);
        return renderTask.promise.then(dataUrlPromise);
    }
    getPageDrawContext(width, height) {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d', { alpha: true });
        if (!ctx) {
            // tslint:disable-next-line: quotemark
            throw new Error("Couldn't create the 2d context");
        }
        canvas.width = width;
        canvas.height = height;
        this.renderer.setStyle(canvas, 'width', `${width}px`);
        this.renderer.setStyle(canvas, 'height', `${height}px`);
        return { ctx, canvas };
    }
    async getCurrentDocumentAsBlob() {
        return (await this.PDFViewerApplication?.export()) || undefined;
    }
    async getFormData(currentFormValues = true) {
        if (!this.PDFViewerApplication) {
            return [];
        }
        const pdf = this.PDFViewerApplication?.pdfDocument;
        // screen DPI / PDF DPI
        const dpiRatio = 96 / 72;
        const result = [];
        for (let i = 1; i <= pdf?.numPages; i++) {
            // track the current page
            const currentPage /* : PDFPageProxy */ = await pdf.getPage(i);
            const annotations = await currentPage.getAnnotations();
            annotations
                .filter((a) => a.subtype === 'Widget') // get the form field annotations only
                .map((a) => ({ ...a })) // only expose copies of the annotations to avoid side-effects
                .forEach((a) => {
                // get the rectangle that represent the single field
                // and resize it according to the current DPI
                const fieldRect = currentPage.getViewport({ scale: dpiRatio }).convertToViewportRectangle(a.rect);
                // add the corresponding input
                if (currentFormValues && a.fieldName) {
                    try {
                        if (a.exportValue) {
                            const currentValue = this.PDFViewerApplication?.pdfDocument.annotationStorage.getValue(a.id, a.fieldName + '/' + a.exportValue, '');
                            a.value = currentValue?.value;
                        }
                        else if (a.radioButton) {
                            const currentValue = this.PDFViewerApplication?.pdfDocument.annotationStorage.getValue(a.id, a.fieldName + '/' + a.fieldValue, '');
                            a.value = currentValue?.value;
                        }
                        else {
                            const currentValue = this.PDFViewerApplication?.pdfDocument.annotationStorage.getValue(a.id, a.fieldName, '');
                            a.value = currentValue?.value;
                        }
                    }
                    catch (exception) {
                        // just ignore it
                    }
                }
                result.push({ fieldAnnotation: a, fieldRect, pageNumber: i });
            });
        }
        return result;
    }
    /**
     * Adds a page to the rendering queue
     * @param {number} pageIndex Index of the page to render
     * @returns {boolean} false, if the page has already been rendered,
     * if it's out of range or if the viewer hasn't been initialized yet
     */
    addPageToRenderQueue(pageIndex) {
        return this.PDFViewerApplication?.pdfViewer.addPageToRenderQueue(pageIndex) ?? false;
    }
    isRenderQueueEmpty() {
        const scrolledDown = true;
        const renderExtra = false;
        if (this.PDFViewerApplication) {
            const nextPage = this.PDFViewerApplication.pdfViewer.renderingQueue.getHighestPriority(this.PDFViewerApplication?.pdfViewer._getVisiblePages(), this.PDFViewerApplication?.pdfViewer._pages, scrolledDown, renderExtra);
            return !nextPage;
        }
        return true;
    }
    hasPageBeenRendered(pageIndex) {
        if (!this.PDFViewerApplication) {
            return false;
        }
        const pages = this.PDFViewerApplication?.pdfViewer._pages;
        if (pages.length > pageIndex && pageIndex >= 0) {
            const pageView = pages[pageIndex];
            const hasBeenRendered = pageView.renderingState === 3;
            return hasBeenRendered;
        }
        return false;
    }
    sleep(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
    }
    async renderPage(pageIndex) {
        if (!this.hasPageBeenRendered(pageIndex)) {
            await this.addPageToRenderQueue(pageIndex);
            while (!this.hasPageBeenRendered(pageIndex)) {
                await this.sleep(7);
            }
        }
    }
    currentlyRenderedPages() {
        if (!this.PDFViewerApplication) {
            return [];
        }
        const pages = this.PDFViewerApplication?.pdfViewer._pages;
        return pages.filter((page) => page.renderingState === 3).map((page) => page.id);
    }
    numberOfPages() {
        if (!this.PDFViewerApplication) {
            return 0;
        }
        const pages = this.PDFViewerApplication?.pdfViewer._pages;
        return pages.length;
    }
    getCurrentlyVisiblePageNumbers() {
        const app = this.PDFViewerApplication;
        if (!app) {
            return [];
        }
        const pages = app.pdfViewer._getVisiblePages().views;
        return pages?.map((page) => page.id);
    }
    async listLayers() {
        if (!this.PDFViewerApplication) {
            return [];
        }
        const optionalContentConfig = await this.PDFViewerApplication?.pdfViewer.optionalContentConfigPromise;
        if (optionalContentConfig) {
            const levelData = optionalContentConfig.getOrder();
            const layerIds = levelData.filter((groupId) => typeof groupId !== 'object');
            return layerIds.map((layerId) => {
                const config = optionalContentConfig.getGroup(layerId);
                return {
                    layerId: layerId,
                    name: config.name,
                    visible: config.visible,
                };
            });
        }
        return undefined;
    }
    async toggleLayer(layerId) {
        if (!this.PDFViewerApplication) {
            return;
        }
        const optionalContentConfig = await this.PDFViewerApplication?.pdfViewer.optionalContentConfigPromise;
        if (optionalContentConfig) {
            let isVisible = optionalContentConfig.getGroup(layerId).visible;
            const checkbox = document.querySelector(`input[id='${layerId}']`);
            if (checkbox) {
                isVisible = checkbox.checked;
                checkbox.checked = !isVisible;
            }
            optionalContentConfig.setVisibility(layerId, !isVisible);
            this.PDFViewerApplication?.eventBus.dispatch('optionalcontentconfig', {
                source: this,
                promise: Promise.resolve(optionalContentConfig),
            });
        }
    }
    scrollPageIntoView(pageNumber, pageSpot) {
        const viewer = this.PDFViewerApplication?.pdfViewer;
        viewer?.scrollPagePosIntoView(pageNumber, pageSpot);
    }
    getSerializedAnnotations() {
        return this.PDFViewerApplication?.pdfViewer.getSerializedAnnotations();
    }
    async addEditorAnnotation(serializedAnnotation) {
        await this.PDFViewerApplication?.pdfViewer.addEditorAnnotation(serializedAnnotation);
    }
    removeEditorAnnotations(filter) {
        this.PDFViewerApplication?.pdfViewer.removeEditorAnnotations(filter);
    }
    async loadImageAsDataURL(imageUrl) {
        if (imageUrl.startsWith('data:')) {
            return imageUrl;
        }
        const response = await fetch(imageUrl);
        if (!response.ok) {
            throw new Error(`Failed to fetch the image from ${imageUrl}: ${response.statusText}`);
        }
        const imageBlob = await response.blob();
        return imageBlob;
    }
    async addImageToAnnotationLayer({ urlOrDataUrl, page, left, bottom, right, top, rotation }) {
        if (!this.PDFViewerApplication) {
            console.error('The PDF viewer has not been initialized yet.');
            return;
        }
        let pageToModify;
        if (page !== undefined) {
            if (page !== this.currentPageIndex()) {
                await this.renderPage(page);
            }
            pageToModify = page;
        }
        else {
            pageToModify = this.currentPageIndex() ?? 0;
        }
        const previousAnnotationEditorMode = this.PDFViewerApplication.pdfViewer.annotationEditorMode;
        this.switchAnnotationEdtorMode(13);
        const dataUrl = await this.loadImageAsDataURL(urlOrDataUrl);
        const pageSize = this.PDFViewerApplication.pdfViewer._pages[pageToModify].pdfPage.view;
        const leftDim = pageSize[0];
        const bottomDim = pageSize[1];
        const rightDim = pageSize[2];
        const topDim = pageSize[3];
        const width = rightDim - leftDim;
        const height = topDim - bottomDim;
        const imageWidth = this.PDFViewerApplication?.pdfViewer._pages[pageToModify].div.clientWidth;
        const imageHeight = this.PDFViewerApplication?.pdfViewer._pages[pageToModify].div.clientHeight;
        const leftPdf = this.convertToPDFCoordinates(left, width, 0, imageWidth);
        const bottomPdf = this.convertToPDFCoordinates(bottom, height, 0, imageHeight);
        const rightPdf = this.convertToPDFCoordinates(right, width, width, imageWidth);
        const topPdf = this.convertToPDFCoordinates(top, height, height, imageHeight);
        const stampAnnotation = {
            annotationType: 13,
            pageIndex: pageToModify,
            bitmapUrl: dataUrl,
            rect: [leftPdf, bottomPdf, rightPdf, topPdf],
            rotation: rotation ?? 0,
            isCopy: true,
        };
        this.addEditorAnnotation(stampAnnotation);
        await this.sleep(10);
        this.switchAnnotationEdtorMode(previousAnnotationEditorMode);
    }
    async addHighlightToAnnotationLayer(color, page, left, bottom, right, top, thickness = 12, rotation = 0, opacity = 0.5) {
        if (!this.PDFViewerApplication) {
            console.error('The PDF viewer has not been initialized yet.');
            return;
        }
        let pageToModify;
        if (page !== undefined) {
            if (page !== this.currentPageIndex()) {
                await this.renderPage(page);
            }
            pageToModify = page;
        }
        else {
            pageToModify = this.currentPageIndex() ?? 0;
        }
        const previousAnnotationEditorMode = this.PDFViewerApplication.pdfViewer.annotationEditorMode;
        this.switchAnnotationEdtorMode(9); // AnnotationEditorType.HIGHLIGHT
        const pageSize = this.PDFViewerApplication.pdfViewer._pages[pageToModify].pdfPage.view;
        const leftDim = pageSize[0];
        const bottomDim = pageSize[1];
        const rightDim = pageSize[2];
        const topDim = pageSize[3];
        const width = rightDim - leftDim;
        const height = topDim - bottomDim;
        const pageWidth = this.PDFViewerApplication?.pdfViewer._pages[pageToModify].div.clientWidth;
        const pageHeight = this.PDFViewerApplication?.pdfViewer._pages[pageToModify].div.clientHeight;
        const leftPdf = this.convertToPDFCoordinates(left, width, 0, pageWidth);
        const bottomPdf = this.convertToPDFCoordinates(bottom, height, 0, pageHeight);
        const rightPdf = this.convertToPDFCoordinates(right, width, width, pageWidth);
        const topPdf = this.convertToPDFCoordinates(top, height, height, pageHeight);
        // Create quadPoints object with numeric keys (matching export format)
        const quadPoints = {};
        quadPoints[0] = leftPdf; // x1 - left edge start
        quadPoints[1] = topPdf; // y1 - top edge start
        quadPoints[2] = rightPdf; // x2 - right edge end
        quadPoints[3] = topPdf; // y2 - top edge end
        quadPoints[4] = leftPdf; // x3 - left edge start (bottom)
        quadPoints[5] = bottomPdf; // y3 - bottom edge start
        quadPoints[6] = rightPdf; // x4 - right edge end (bottom)
        quadPoints[7] = bottomPdf; // y4 - bottom edge end
        const highlightAnnotation = {
            annotationType: 9,
            color: color,
            opacity: opacity,
            thickness: thickness,
            quadPoints: quadPoints,
            outlines: [
                [
                    // Single outline rectangle
                    leftPdf,
                    bottomPdf,
                    leftPdf,
                    topPdf,
                    rightPdf,
                    topPdf,
                    rightPdf,
                    bottomPdf, // Bottom-right
                ],
            ],
            pageIndex: pageToModify,
            rect: [leftPdf, bottomPdf, rightPdf, topPdf],
            rotation: rotation,
            isCopy: true,
        };
        this.addEditorAnnotation(highlightAnnotation);
        await this.sleep(10);
        this.switchAnnotationEdtorMode(previousAnnotationEditorMode);
    }
    currentPageIndex() {
        const viewer = this.PDFViewerApplication?.pdfViewer;
        if (viewer) {
            return viewer.currentPageNumber - 1;
        }
        return undefined;
    }
    convertToPDFCoordinates(value, maxValue, defaultValue, imageMaxValue) {
        if (!value) {
            return defaultValue;
        }
        if (typeof value === 'string') {
            if (value.endsWith('%')) {
                return (parseInt(value, 10) / 100) * maxValue;
            }
            else if (value.endsWith('px')) {
                return parseInt(value, 10) * (maxValue / imageMaxValue);
            }
            else {
                return parseInt(value, 10);
            }
        }
        else {
            return value;
        }
    }
    switchAnnotationEdtorMode(mode) {
        this.PDFViewerApplication?.eventBus.dispatch('switchannotationeditormode', { mode });
    }
    set editorFontSize(size) {
        this.setEditorProperty(AnnotationEditorParamsType.FREETEXT_SIZE, size);
    }
    set editorFontColor(color) {
        this.setEditorProperty(AnnotationEditorParamsType.FREETEXT_COLOR, color);
    }
    set editorInkColor(color) {
        this.setEditorProperty(AnnotationEditorParamsType.INK_COLOR, color);
    }
    set editorInkOpacity(opacity) {
        this.setEditorProperty(AnnotationEditorParamsType.INK_OPACITY, opacity);
    }
    set editorInkThickness(thickness) {
        this.setEditorProperty(AnnotationEditorParamsType.INK_THICKNESS, thickness);
    }
    set editorHighlightColor(color) {
        this.setEditorProperty(AnnotationEditorParamsType.HIGHLIGHT_COLOR, color);
    }
    set editorHighlightDefaultColor(color) {
        this.setEditorProperty(AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR, color);
    }
    set editorHighlightShowAll(showAll) {
        this.setEditorProperty(AnnotationEditorParamsType.HIGHLIGHT_SHOW_ALL, showAll);
    }
    set editorHighlightThickness(thickness) {
        this.setEditorProperty(AnnotationEditorParamsType.HIGHLIGHT_THICKNESS, thickness);
    }
    setEditorProperty(editorPropertyType, value) {
        this.PDFViewerApplication?.eventBus.dispatch('switchannotationeditorparams', { type: editorPropertyType, value });
        this.PDFViewerApplication?.eventBus.dispatch('annotationeditorparamschanged', { details: [[editorPropertyType, value]] });
    }
    getCurrentPage() {
        if (!this.PDFViewerApplication) {
            return 1;
        }
        return this.PDFViewerApplication.page ?? 1;
    }
    getPageCount() {
        if (!this.PDFViewerApplication) {
            return 0;
        }
        return this.PDFViewerApplication.pagesCount ?? 0;
    }
    movePage(fromIndex, toIndex) {
        if (!this.PDFViewerApplication) {
            console.error('PDF viewer not initialized');
            return;
        }
        // Check if page reordering is enabled
        const enablePageReordering = globalThis.pdfDefaultOptions?.enablePageReordering;
        if (!enablePageReordering) {
            console.error('Page reordering is not enabled. Set pdfDefaultOptions.enablePageReordering = true');
            return;
        }
        // Validate indices (1-based)
        const pageCount = this.getPageCount();
        if (fromIndex < 1 || fromIndex > pageCount || toIndex < 1 || toIndex > pageCount) {
            console.error(`Invalid page indices. fromIndex: ${fromIndex}, toIndex: ${toIndex}, pageCount: ${pageCount}`);
            return;
        }
        if (fromIndex === toIndex) {
            return; // No movement needed
        }
        try {
            // Call the movePage function from app.js
            if (this.PDFViewerApplication.movePage) {
                this.PDFViewerApplication.movePage(fromIndex, toIndex);
            }
            else {
                console.error('movePage function not available in PDF viewer application');
            }
        }
        catch (error) {
            console.error('Error moving page:', error);
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: NgxExtendedPdfViewerService, deps: [{ token: i0.RendererFactory2 }, { token: i1.PDFNotificationService }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: NgxExtendedPdfViewerService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: NgxExtendedPdfViewerService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i0.RendererFactory2 }, { type: i1.PDFNotificationService }] });
//# sourceMappingURL=data:application/json;base64,