import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { CSP_NONCE, Component, Inject, Input, Optional, PLATFORM_ID } from '@angular/core';
import { VerbosityLevel } from '../options/verbosity-level';
import { PdfBreakpoints } from '../responsive-visibility';
import { UnitToPx } from '../unit-to-px';
import * as i0 from "@angular/core";
import * as i1 from "../pdf-csp-policy.service";
export class DynamicCssComponent {
    renderer;
    document;
    platformId;
    pdfCspPolicyService;
    nonce;
    zoom = 1.0;
    width = 3.14159265359;
    xxs = 455;
    xs = 490;
    sm = 560;
    md = 610;
    lg = 660;
    xl = 740;
    xxl = 830;
    get style() {
        return `
#toolbarContainer .always-in-secondary-menu {
  display: none;
}

#secondaryToolbar .always-in-secondary-menu {
  display: inline-flex;
}

#outerContainer #mainContainer .visibleXXSView,
#outerContainer #mainContainer .visibleTinyView,
#outerContainer #mainContainer .visibleSmallView,
#outerContainer #mainContainer .visibleMediumView,
#outerContainer #mainContainer .visibleLargeView,
#outerContainer #mainContainer .visibleXLView,
#outerContainer #mainContainer .visibleXXLView {
  display: none;
}

.pdf-margin-top-3px {
  margin-top: 3px;
}

.pdf-margin-top--2px {
  margin-top: -2px;
}

@media all and (max-width: ${this.xxl}) {
  #sidebarContent {
    background-color: rgba(0, 0, 0, 0.7);
  }

  html[dir='ltr'] #outerContainer.sidebarOpen #viewerContainer {
    left: 0px !important;
  }
  html[dir='rtl'] #outerContainer.sidebarOpen #viewerContainer {
    right: 0px !important;
  }

  #outerContainer .hiddenLargeView,
  #outerContainer .hiddenMediumView {
    display: inherit;
  }
}

@media all and (max-width: ${this.lg}px) {
  .toolbarButtonSpacer {
    width: 15px;
  }

  #outerContainer .hiddenLargeView {
    display: none;
  }
  #outerContainer  #mainContainer .visibleLargeView {
    display: inherit;
  }
}

@media all and (max-width: ${this.md}px) {
  .toolbarButtonSpacer {
    display: none;
  }
  #outerContainer .hiddenMediumView {
    display: none;
  }
  #outerContainer  #mainContainer .visibleMediumView {
    display: inherit;
  }
}

@media all and (max-width: ${this.sm}px) {
  #outerContainer .hiddenSmallView,
  #outerContainer .hiddenSmallView * {
    display: none;
  }
  #outerContainer  #mainContainer .visibleSmallView {
    display: inherit;
  }
  .toolbarButtonSpacer {
    width: 0;
  }
  html[dir='ltr'] .findbar {
    left: 38px;
  }
  html[dir='rtl'] .findbar {
    right: 38px;
  }
}

#outerContainer .visibleXLView,
#outerContainer .visibleXXLView,
#outerContainer .visibleTinyView {
  display: none;
}

#outerContainer .hiddenXLView,
#outerContainer .hiddenXXLView {
  display: unset;
}

@media all and (max-width: ${this.xl}px) {
  #outerContainer .hiddenXLView {
    display: none;
  }
  #outerContainer .visibleXLView {
    display: inherit;
  }
}

@media all and (max-width: ${this.xxl}px) {
  #outerContainer .hiddenXXLView {
    display: none;
  }
  #outerContainer  #mainContainer .visibleXXLView {
    display: inherit;
  }
}

@media all and (max-width: ${this.xs}px) {
  #outerContainer .hiddenTinyView,
  #outerContainer .hiddenTinyView * {
    display: none;
  }
  #outerContainer  #mainContainer .visibleTinyView {
    display: inherit;
  }
}

@media all and (max-width: ${this.xxs}px) {
  #outerContainer .hiddenXXSView,
  #outerContainer .hiddenXXSView * {
    display: none;
  }
  #outerContainer #mainContainer .visibleXXSView {
    display: inherit;
  }
}
  `;
    }
    constructor(renderer, document, platformId, pdfCspPolicyService, nonce) {
        this.renderer = renderer;
        this.document = document;
        this.platformId = platformId;
        this.pdfCspPolicyService = pdfCspPolicyService;
        this.nonce = nonce;
        if (isPlatformBrowser(this.platformId)) {
            this.width = document.body.clientWidth;
        }
    }
    updateToolbarWidth() {
        const container = document.getElementById('toolbarViewer') ?? document.getElementById('outerContainer');
        if (!container) {
            return;
        }
        const toolbarWidthInPixels = container.clientWidth;
        const fullWith = this.document.body.clientWidth;
        const partialViewScale = fullWith / toolbarWidthInPixels;
        const scaleFactor = partialViewScale * (this.zoom ? this.zoom : 1);
        this.xs = scaleFactor * PdfBreakpoints.xs;
        this.sm = scaleFactor * PdfBreakpoints.sm;
        this.md = scaleFactor * PdfBreakpoints.md;
        this.lg = scaleFactor * PdfBreakpoints.lg;
        this.xl = scaleFactor * PdfBreakpoints.xl;
        this.xxl = scaleFactor * PdfBreakpoints.xxl;
        let styles = this.document.getElementById('pdf-dynamic-css');
        if (!styles) {
            styles = this.document.createElement('STYLE');
            styles.id = 'pdf-dynamic-css';
            this.pdfCspPolicyService.addTrustedCSS(styles, this.style);
            if (this.nonce) {
                styles.nonce = this.nonce;
            }
            this.renderer.appendChild(this.document.head, styles);
        }
        else {
            this.pdfCspPolicyService.addTrustedCSS(styles, this.style);
        }
    }
    removeScrollbarInInfiniteScrollMode(restoreHeight, pageViewMode, primaryMenuVisible, ngxExtendedPdfViewer, logLevel) {
        if (pageViewMode === 'infinite-scroll' || restoreHeight) {
            const viewer = document.getElementById('viewer');
            const zoom = document.getElementsByClassName('zoom')[0];
            if (viewer) {
                setTimeout(() => {
                    if (pageViewMode === 'infinite-scroll') {
                        const height = viewer.clientHeight + 17;
                        if (primaryMenuVisible) {
                            ngxExtendedPdfViewer.height = height + 35 + 'px';
                        }
                        else if (height > 17) {
                            ngxExtendedPdfViewer.height = height + 'px';
                        }
                        else if (ngxExtendedPdfViewer.height === undefined) {
                            ngxExtendedPdfViewer.height = '100%';
                        }
                        if (zoom) {
                            zoom.style.height = ngxExtendedPdfViewer.height;
                        }
                    }
                    else if (restoreHeight) {
                        ngxExtendedPdfViewer.height = undefined;
                        ngxExtendedPdfViewer.autoHeight = true;
                        this.checkHeight(ngxExtendedPdfViewer, logLevel);
                    }
                });
            }
        }
    }
    checkHeight(ngxExtendedPdfViewer, logLevel) {
        if (this.isHeightDefinedWithUnits(ngxExtendedPdfViewer.height))
            return;
        if (this.isPrinting())
            return;
        const container = this.getContainer();
        if (!container)
            return;
        if (this.isContainerHeightZero(container, ngxExtendedPdfViewer, logLevel)) {
            ngxExtendedPdfViewer.autoHeight = true;
        }
        if (ngxExtendedPdfViewer.autoHeight) {
            this.adjustHeight(container, ngxExtendedPdfViewer);
        }
    }
    /**
     * The height is defined with one of the units vh, vw, em, rem, etc.
     * So the height check isn't necessary.
     * @param height the height of the container
     */
    isHeightDefinedWithUnits(height) {
        return height ? isNaN(Number(height.replace('%', ''))) : false;
    }
    /**
     * #1702 workaround to a Firefox bug: when printing, container.clientHeight is temporarily 0,
     * causing ngx-extended-pdf-viewer to default to 100 pixels height. So it's better to do nothing.
     * @returns true if data-pdfjsprinting is set
     */
    isPrinting() {
        if (!this.isBrowser()) {
            return false;
        }
        return !!document.querySelector('[data-pdfjsprinting]');
    }
    /**
     * Checks if the code is running in a browser environment.
     */
    isBrowser() {
        return typeof window !== 'undefined' && typeof document !== 'undefined';
    }
    getContainer() {
        return typeof document !== 'undefined' ? document.getElementsByClassName('zoom')[0] : null;
    }
    isContainerHeightZero(container, ngxExtendedPdfViewer, logLevel) {
        if (container.clientHeight === 0) {
            if (logLevel >= VerbosityLevel.WARNINGS && !ngxExtendedPdfViewer.autoHeight && ngxExtendedPdfViewer.height !== '100%') {
                console.warn("The height of the PDF viewer widget is zero pixels. Please check the height attribute. Is there a syntax error? Or are you using a percentage with a CSS framework that doesn't support this? The height is adjusted automatedly.");
            }
            return true;
        }
        return false;
    }
    adjustHeight(container, ngxExtendedPdfViewer) {
        const available = window.innerHeight;
        const rect = container.getBoundingClientRect();
        const top = rect.top;
        let maximumHeight = available - top;
        const padding = this.calculateBorderMargin(container);
        maximumHeight -= padding;
        ngxExtendedPdfViewer.minHeight = maximumHeight > 100 ? `${maximumHeight}px` : '100px';
        ngxExtendedPdfViewer.markForCheck();
    }
    calculateBorderMargin(container) {
        if (container) {
            const computedStyle = window.getComputedStyle(container);
            const padding = UnitToPx.toPx(computedStyle.paddingBottom);
            const margin = UnitToPx.toPx(computedStyle.marginBottom);
            if (container.style.zIndex) {
                return padding + margin;
            }
            return padding + margin + this.calculateBorderMargin(container.parentElement);
        }
        return 0;
    }
    ngOnDestroy() {
        const styles = this.document.getElementById('pdf-dynamic-css');
        if (styles?.parentElement) {
            styles.parentElement.removeChild(styles);
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DynamicCssComponent, deps: [{ token: i0.Renderer2 }, { token: DOCUMENT }, { token: PLATFORM_ID }, { token: i1.PdfCspPolicyService }, { token: CSP_NONCE, optional: true }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.12", type: DynamicCssComponent, selector: "pdf-dynamic-css", inputs: { zoom: "zoom", width: "width" }, ngImport: i0, template: "", styles: [""] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DynamicCssComponent, decorators: [{
            type: Component,
            args: [{ selector: 'pdf-dynamic-css', template: "" }]
        }], ctorParameters: () => [{ type: i0.Renderer2 }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: i1.PdfCspPolicyService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [CSP_NONCE]
                }, {
                    type: Optional
                }] }], propDecorators: { zoom: [{
                type: Input
            }], width: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,